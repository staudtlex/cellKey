// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cpp_get_max_contributions
List cpp_get_max_contributions(List logicals_R, NumericMatrix microdat_R, String wvar_R, CharacterVector nv_R, int top_k_in, int n_threads);
RcppExport SEXP _cellKey_cpp_get_max_contributions(SEXP logicals_RSEXP, SEXP microdat_RSEXP, SEXP wvar_RSEXP, SEXP nv_RSEXP, SEXP top_k_inSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type logicals_R(logicals_RSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type microdat_R(microdat_RSEXP);
    Rcpp::traits::input_parameter< String >::type wvar_R(wvar_RSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type nv_R(nv_RSEXP);
    Rcpp::traits::input_parameter< int >::type top_k_in(top_k_inSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_get_max_contributions(logicals_R, microdat_R, wvar_R, nv_R, top_k_in, n_threads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cellKey_cpp_get_max_contributions", (DL_FUNC) &_cellKey_cpp_get_max_contributions, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_cellKey(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
